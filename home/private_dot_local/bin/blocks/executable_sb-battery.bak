#!/bin/sh
. sb-config
# Required: acpi, xbacklight, proper graphics driver installed

# time=$(acpi -b | awk '/Battery/ {print " (" substr($5,1,5)")"}')
# est="$(acpi -b | awk -F ': |, ' '{printf "%s\n%s\n", $2, $4}')"
# [ -z "$est" ] && est="Cannot show estimated battery"
# Backlight
percbl=$(xbacklight -get | cut -d "." -f1)
case $BLOCK_BUTTON in
	# 1) notify-send "$est" ;;
	3) notify-send "üîã Battery module" "üîã: discharging
üõë: not charging
‚ôª: stagnant charge
üîå: charging
‚ö°: charged
‚ùó: battery very low!
- Scroll to change adjust xbacklight." ;;
# intel only
	4) xbacklight -inc 5 ;;
	5) xbacklight -dec 5 ;;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# Loop through all attached batteries and format the info
for bat in /sys/class/power_supply/BAT?*; do
	# If non-first battery, print a space separator.
	[ -n "${capacity+x}" ] && printf " "
	# Sets up the capacity and status
	capacity="$(cat "$bat/capacity" 2>&1)"
	case "$(cat "$bat/status" 2>&1)" in
		"Full") status="${fg_green}${batalt}" ;;
		"Discharging") 
			#ÓÇ≥
			if [ "$capacity" -ge 10 ] && [ "$capacity" -le 20 ]; then
#				status="${fg_red}${bat1}"
				status="${bat1}"
				# warn="${fg_red}"
			elif [ "$capacity" -ge 20 ] && [ "$capacity" -le 30 ]; then
#				status="${fg_green}${bat2}"
				status="${bat2}"
				# warn="${fg_red}"
			elif [ "$capacity" -ge 30 ] && [ "$capacity" -le 40 ]; then
				status="${fg_green}${bat3}"
			elif [ "$capacity" -ge 40 ] && [ "$capacity" -le 50 ]; then
				status="${fg_green}${bat4}"
			elif [ "$capacity" -ge 50 ] && [ "$capacity" -le 60 ]; then
				status="${fg_green}${bat5}"
			elif [ "$capacity" -ge 60 ] && [ "$capacity" -le 70 ]; then
				status="${fg_green}${bat6}"
			elif [ "$capacity" -ge 70 ] && [ "$capacity" -le 80 ]; then
				status="${fg_green}${bat7}"
			elif [ "$capacity" -ge 80 ] && [ "$capacity" -le 90 ]; then
				status="${fg_green}${bat8}"
			elif [ "$capacity" -ge 90 ] && [ "$capacity" -le 100 ]; then
				status="${fg_green}${bat9}"
			else
				status="${fg_red}${bat1}"
				# warn="${fg_red}ÓÇ≥"
			fi
			;;
		"Charging") status="${fg_yellow}${batcharge}" ;;
		"Not charging") status="${fg_red}${batcharge}ÓÇ≥" ;;
		"Unknown") status="${fg_yellow}${balalt}" ;;
		*) exit 1 ;;
	esac
	# Screen Backlight
	if [ "${percbl}" -ge 0 ] && [ "${percbl}" -le 30 ]; then
		bl="${fg_green}${_backlighticon}${fg_norm}${percbl}% "
	elif [ "${percbl}" -ge 30 ] && [ "${percbl}" -le 70 ]; then
		bl="${fg_orange}${_backlighticon}${fg_norm}${percbl}% "
	elif [ "${percbl}" -ge 70 ] && [ "${percbl}" -le 100 ]; then
		bl="${fg_red}${_warnbacklighticon}${fg_norm}${percbl}% "
	fi
	# Will make a warn variable if discharging and low
	# [ "$status" = "üîã" ] && [ "$capacity" -le 25 ] && warn="‚ùó"
	# Prints the info
	printf "%s%s^d^${fg_norm}%d%% %s" "$status" "$warn" "$capacity" "$bl"; unset warn
done && printf "\\n"

